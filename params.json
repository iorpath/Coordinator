{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Apreciaciones útiles inconvenientes solucionados, tips, comentarios, etc.","name":"Coordinator","google":"iorpath","body":"# Guía de GitHub\r\n\r\n\r\n## Configurar git en la máquina\r\n\r\n1. Establecer un nombre de usuario\r\n```\r\ngit config --global user.name \"Your Name Here\"\r\n```\r\n\r\n2. Establecer email (el mismo de la cuenta de github)\r\n```\r\ngit config --global user.email \"gafemoyano@gmail.com\"\r\n```\r\n\r\n\r\n## Configurar el proyecto\r\n\r\n1. Descargar el proyecto (tengan presente en qué carpeta están ubicados para después añadir el proyecto a aptana)\r\n```\r\ngit clone https://github.com/gafemoyano/sistema-coordinador.git \r\n```\r\n \r\n2. Configurar git para que esté pendiente de cambios locales en los archivos descargados (pendientes del punto después de add)\r\n```\r\ngit add .\r\n```\r\n\r\n3. Cree un archivo de prueba para verificar que funciona\r\n```\r\ntouch NOMBRETEST\r\n```\r\n\r\n4. Hacer commit (Siempre con un mensaje para saber lo que alguien hizo)\r\n```\r\ngit commit -m ‘commit test’\r\n```\r\nRecuerde que los commit son locales y solamente quedan registrados en su máquina virtual.\r\n\r\n5. Configurar el repositorio remoto\r\n```\r\ngit remote add origin https://github.com/gafemoyano/sistema-coordinador.git \r\n```\r\n\r\n6. Enviar los commits al repositorio de GitHub\r\n```\r\ngit push origin master\r\n```\r\n\r\n7. Actualizar los repositorios locales con los cambios enviados al repositorio remoto.\r\n```\r\ngit pull origin master\r\n```\r\n\r\nEsto es para ver el proyecto completo con los commits de todos. Lo único que yo recomiendo, aunque creo que ustedes ya saben eso, es que hagan todos los commit que quieran para ir guardando su progreso pero no hagan push a cosas que no estén funcionando completamente de manera que en el master sólo haya código funcional.\r\n\r\n\r\n## TAGS\r\n\r\nPara los que quieran git tiene una funcionalidad que a mí, personalmente, me parece muy útil: las etiquetas. Básicamente permiten marcar un commit de manera verbal para luego poder devolverse, ver diferencias, tener un punto de referencia, etc. \r\nSupongan que están trabajando en la historia de usuario Solicitar homologación de materia vista por el estudiante realizando la tarea de Pruebas de Aceptación.\r\n\r\n1. Hacer un commit\r\n```\r\ngit commit –m “Pruebas Unitarias terminadas”\r\n```\r\n\r\n2. Insertar el tag\r\n```\r\ngit tag sto-22-pruebas-unitarias\r\n```\r\n\r\n3. Enviar a GitHub\r\n```\r\ngit push origin --tags\r\n```\r\n\r\nEn resumen un commit queda relacionado a una etiqueta, que es mucho más fácil de recordar que el id que tiene por default, en caso de que tengan que hacer referencia a dicho commit después si se les daña algo o tienen un error que no pueden arreglar o lo que sea.\r\n\r\n----------------------------------------------------------------------------------------------------"}